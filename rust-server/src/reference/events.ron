EventList (
	events: [
// from md.xsd
Event (
	name: "event_briefing_started",
	description: "Event for when a briefing is started for a mission or mission offer (object = cue, param = list of rendertarget names)",
	object: [Cue],
	param: [List],
),
Event (
	name: "event_briefing_cancelled",
	description: "Event for when a briefing is cancelled (object = cue)",
	object: [Cue],
),
Event (
	name: "event_briefing_submission_selected",
	description: "Event for when a submission selection is made in a briefing is started for a mission thread or mission thread offer (object = submission cue, param = list of rendertarget names)",
	object: [Cue],
	param: [List],
),
Event (
	name: "event_briefing_submission_unselected",
	description: "Event for when a submission is unselected in a mission thread related briefing (object = submission cue)",
	object: [Cue],
),
Event (
	name: "event_cue_activated",
	description: "Event for when a cue is activated (object = cue)",
	object: [Cue],
),
Event (
	name: "event_cue_cancelled",
	description: "Event for when a cue is cancelled (object = cue)",
	object: [Cue],
),
Event (
	name: "event_cue_completed",
	description: "Event for when a cue is completed (object = cue)",
	object: [Cue],
),
Event (
	name: "event_cue_signalled",
	description: "Event for when a cue is signalled (object = cue). Default is this cue if no cue is specified. (param = Script parameter passed from signal_cue_instantly)",
	object: [Cue],
	param: [Unknown],
	// param can be any type, depending on what Cue called this one, which is unfortunately not a parameter available to us here :(
),
Event (
	name: "event_guidance_disabled",
	description: "Event for when mission guidance is disabled for a mission (object = mission cue). NOTE: Under normal circumstances, this event should not have an effect on a mission.",
	object: [Cue],
),
Event (
	name: "event_guidance_enabled",
	description: "Event for when mission guidance is enabled for a mission (object = cue). NOTE: Under normal circumstances, this event should not have an effect on a mission.",
	object: [Cue],
),
Event (
	name: "event_mission_aborted",
	description: "Event for when a mission is aborted by the player (object = cue)",
	object: [Cue],
),
Event (
	name: "event_npc_created",
	description: "Event for when a npc is created (param = npc actor)",
	param: [Entity],
),
Event (
	name: "event_offer_accepted",
	description: "Event for when a cue offer is accepted (object = cue)",
	object: [Cue],
),
Event (
	name: "event_platform_actor_created",
	description: "Event for when a character is created on a platform by platform population system, or manually by create_platform_actor (param = actor, param2 = entity type, param3 = true iff actor is a representative)",
	param: [Entity], 
	param2: [Entitytype],
	param3: [Boolean], //true iff actor is a representative
),
Event (
	name: "event_boarding_triggered",
	description: "Event for when a marine commander starts a boarding operation (param = commander, param2 = target to be boarded, param3 = boarder faction)",
	param: [Entity], //The marine commander that controls the boarding operation
	param2: [Ship], //The target object to be boarded
	param3: [Faction], //The boarder faction, which is trying to take ownership of the target
),
Event (
	name: "event_boarding_support_requested",
	description: "Event for when a boarding commander requests support by the player (param = commander, param2 = object being boarded, param3 = forced mission (0 should mean no forced mission))",
	param: [Entity], //The platform commander requesting support
	param2: [Ship], //The object being boarded by the commander requesting support
	param3: [Integer],
),
// from common.xsd
Event (
	name: "event_playerpricemodifier",
	description: "no valid description available",
	object: [Ship, Station, Faction], //Source of discount/commission, can be an object or a faction
),
Event (
	name: "event_repair_requested",
	description: "Event for when repair of a component has been requested (object = the object containing the damaged component - e.g. a ship or station, param = the damaged component, param2 = whether to make the damaged component a priority for repair)",
	object: [Object, Ship, Station], //object that has the broken component
	param: [Component], //what needs fixing
	param2: [Boolean], //should it be prioritized?
),
Event (
	//TODO: review
	name: "event_ui_triggered",
	description: "Event for when a UI control is triggered (param = screen ID, param2 = control ID, param3 = screen parameters)",
	param: [Unknown], //screen ID
	param2: [Unknown], // control ID
	param3: [Unknown], //screen parameters
),
Event (
	name: "event_unit_destroyed",
	description: "Event for when a unit has been destroyed (object = the object owning the unit, param = the unit's category, param2 = the unit's mk)",
	object: [Ship, Station, Object],
	param: [Unitcategory],
	param2: [Integer],
),
Event (
	name: "event_unit_started_building",
	description: "Event for when a unit has started building/welding (object = the object on which the unit operates, param = the unit's mk)",
	object: [Ship, Station],
	param: [Integer],
),
Event (
	name: "event_unit_stopped_building",
	description: "Event for when a unit has stopped building/welding (object = the object on which the unit operates, param = the unit's mk)",
	object: [Ship, Station, Object],
	param: [Integer],
),
Event (
	name: "event_unit_started_repairing",
	description: "Event for when a unit has started repairing/welding (object = the object on which the unit operates, param = the unit's mk)",
	object: [Ship, Station, Object],
	param: [Integer],
),
Event (
	name: "event_unit_stopped_repairing",
	description: "Event for when a unit has stopped repairing/welding (object = the object on which the unit operates, param = the unit's mk)",
	object: [Ship, Station, Object],
	param: [Integer],
),
Event (
	name: "event_boarding_operation_created",
	description: "Event for when a boarding operation has been created (param = boarding operation id)",
	param: [Operation],
),
Event (
	name: "event_boarding_operation_started",
	description: "Event for when a boarding operation has been started (param = boarding operation id)",
	param: [Operation],
),
Event (
	name: "event_boarding_operation_removed",
	description: "Event for when a boarding operation has been removed (param = boarding operation id)",
	param: [Operation],
),
Event (
	name: "event_boarding_phase_changed",
	description: "Event for when a boarding operation has had its phase changed (param = boarding operation id, param2 = new boardingphase, param3 = old boardingphase)",
	param: [Operation],
	param1: [Boardingphase], //new boardingphase
	param2: [Boardingphase], //old boardingphase
),
Event (
	name: "event_boarding_support_failed",
	description: "Event for when a boarding support mission was NOT successful (object = boarding commander)",
	object: [Entity],
),
Event (
	name: "event_boarding_support_succeeded",
	description: "Event for when a boarding support mission was successful (object = boarding commander)",
	object: [Entity],
),
Event (
	name: "event_boost_charging_aborted",
	description: "Event for when an object aborts charging boost (object = boosting object)",
	object: [Ship],
),
Event (
	name: "event_boost_charging_started",
	description: "Event for when an object starts charging boost (object = boosting object)",
	object: [Ship],
),
Event (
	name: "event_boost_started",
	description: "Event for when an object starts boosting (object = boosting object)",
	object: [Ship],
),
Event (
	name: "event_boost_stopped",
	description: "Event for when an object stops boosting (object = boosting object)",
	object: [Ship],
),
Event (
	// TODO: review
	name: "event_build_started",
	description: "Event for when a build related to the object begins (object = buildprocessor/buildmodule/buildingobject/buildingobjectcommander/buildobject, param = buildprocessor, param2 = constructionsequence, param3 = buildtask)",
	object: [Buildmodule, Buildprocessor, Entity, Container, Station, Ship], //thing doing building + thing being built?? very confusing
	param: [Buildprocessor],
	param2: [Constructionsequence],
	param3: [Build],
),
Event (
	// TODO: review
	name: "event_build_finished",
	description: "Event for when a build related to the object finishes (object = buildprocessor/buildmodule/buildingobject/buildingobjectcommander/buildobject, param = buildprocessor, param2 = unused, param3 = buildtask)",
	object: [Buildmodule, Buildprocessor, Entity, Container, Station, Ship], //thing doing building + thing being built?? very confusing
	param: [Buildprocessor],
	param3: [Build],
),
Event (
	// TODO: review
	name: "event_build_finished_components",
	description: "Event for when a build related to the object partially finishes construction. List of completed components is provided. (object = buildprocessor/buildmodule/buildingobject/buildingobjectcommander/buildobject, param = buildprocessor, param2 = list, param3 = buildtask)",
	object: [Buildmodule, Buildprocessor, Entity, Container, Station, Ship], //thing doing building + thing being built?? very confusing
	param: [Buildprocessor],
	param2: [List], //finished components??
	param3: [Build],
),
Event (
	// TODO: review
	name: "event_build_cancelled",
	description: "Event for when a build related to the object is cancelled (object = buildprocessor/buildmodule/buildingobject/buildingobjectcommander/buildobject, param = buildprocessor, param2 = constructionsequence, param3 = buildtask)",
	object: [Buildmodule, Buildprocessor, Entity, Container, Station, Ship], //thing doing building + thing being built?? very confusing
	param: [Buildprocessor],
	param2: [Constructionsequence],
	param3: [Build],
),
Event (
	// TODO: review
	name: "event_build_added",
	description: "Event for when a build task is added (object = building object, param = build task)",
	object: [Buildmodule, Station, Ship],
	param: [Build],
),
Event (
	// TODO: review
	name: "event_object_built_ship",
	description: "Event for when a ship is constructed to operational state (object = buildingobject, param = ship, param2 = buildtask)",
	object: [Buildmodule, Station, Ship],
	param: [Ship],
	param2: [Build],
),
Event (
	// TODO: review
	name: "event_object_built_station",
	description: "Event for when a station is constructed to operational state (object = buildingobject, param = station, param2 = buildtask)",
	object: [Buildmodule],
	param: [Station],
	param2: [Build],
),
Event (
	name: "event_build_loadout_applied",
	description: "Event for when a build related to the object has applied a loadout to the build component. List of added components is provided. (object = buildprocessor/buildmodule/buildingobject/buildingobjectcommander/buildobject, param = buildprocessor, param2 = new components, param3 = buildtask)",
	object: [Buildmodule, Buildprocessor, Entity, Container, Station, Ship], //thing doing building + thing being built?? very confusing
	param: [Buildprocessor],
	param2: [List], //Components!!
	param3: [Build],
),
Event (
	name: "event_control_entity_added",
	description: "Event for when a control entity is set on a controllable (object = controllable or entity, param = entity)",
	object: [Controllable, Ship, Entity],
	param: [Entity],
),
Event (
	name: "event_control_entity_removed",
	description: "Event for when a control entity is removed from a controllable (object = controllable or entity, param = entity, param2 = kill method)",
	object: [Controllable, Ship, Entity],
	param: [Entity],
	param2: [Killmethod],
),
Event (
	// TODO: review
	name: "event_conversation_finished",
	description: "Event for when a conversation is finished (object = actor (entity or list containing context and template), param = outcome, param2 = outcome parameter)",
	object: [Entity],
	param: [String], //Conversation outcome (the name of the last section chosen by the player, or the conversation name in case of a non-interactive conversation)
	param2: [String], //The outcome parameter (the last choice parameter as provided by add_player_choice, add_player_choice_sub, or a menu selection), or the conversation parameter in case of a non-interactive conversation (as provided by start_conversation)
),
Event (
	name: "event_conversation_next_section",
	description: "Event for when the next section in a conversation is triggered (object = actor (entity or list containing context and template), param = section name, param2 = choice parameter)",
	object: [Entity],
	param: [String],
	param2: [Unknown], //can be anything
),
Event (
	name: "event_conversation_returned_to_section",
	description: "Event for when a sub-conversation returns to the previous section (object = actor (entity or list containing context and template), param = section name, param2 = base parameter, param3 = return parameter)",
	object: [Entity],
	param: [String],
	param2: [Unknown], //can be set to anything
	param3: [Unknown], //can be set to anything
),
Event (
	name: "event_conversation_started",
	description: "Event for when a conversation is started (object = actor (entity or list containing context and template), param = conversation name, param2 = conversation parameter)",
	object: [Entity],
	param: [String],
	param2: [Unknown], //can be set to anything
),
Event (
	// TODO: review
	name: "event_player_warning",
	description: "Event for when the player shuold be warned, e.g. on station explosion (param = component, param2 = text line)",
	param: [Component],
	param2: [String], //Tfile
),
Event (
	name: "event_cutscene_camera_created",
	description: "Event for when the camera of a cutscene is created (param = cutscene key string, param2 = cutscene ID)",
	param: [String],
	param2: [String],
),
Event (
	name: "event_cutscene_signal",
	description: "Event for when a cutscene sends a signal (param = cutscene key string)",
	param: [String],
),
Event (
	name: "event_cutscene_started",
	description: "Event for when a cutscene starts (param = cutscene key string, param2 = cutscene ID)",
	param: [String],
	param2: [String],
),
Event (
	name: "event_cutscene_stopped",
	description: "Event for when a cutscene ends (param = cutscene key string, param2 = cutscene ID)",
	param: [String],
	param2: [String],
),
Event (
	name: "event_long_range_scan_ping",
	description: "Event for when an object is pinged by a long range scan. (object = scanned object, param = true iff the result was 'identified')",
	object: [Object], //scanned object
	param: [Boolean], //is object identified?
),
Event (
	name: "event_long_range_scan_sent",
	description: "Event for when an object sends out a long range scan wave. (object = scanning object or player)",
	object: [Ship, Entity],
),
Event (
	// TODO: review param
	name: "event_character_animation_started",
	description: "Event for when a character starts an animation. (object = player/npc, param = animation ID)",
	object: [Entity],
	param: [String, Integer],
),
Event (
	name: "event_character_animation_finished",
	description: "Event for when a character finishes an animation. (object = player/npc, param = animation ID)",
	object: [Entity],
	param: [String, Integer],
),
Event (
	name: "event_npc_walk_finished",
	description: "Event for when a npc finishes their walk. (object = npc)",
	object: [NPC],
),
Event (
	// TODO: review
	name: "event_npc_slots_validated",
	description: "Event for when npc slots are validated in an interior which could have blocked slots (object = interior or object of interior, param = interior, param2 = was this a recalculation of an already validated interior?)",
	object: [Navcontext, Room, Object],
	param: [Navcontext, Room, Object],
	param2: [Boolean],
),
Event (
	name: "event_lock_acquired",
	description: "Event for when a target lock is acquired (requires attribute attacker and/or target) (object = attacker if supplied, otherwise target object, param = the other object, param2 = locking weapon, param3 = target component)",
	object: [Ship, Object, Station],
	param: [Ship, Object, Station],
	param2: [Weapon],
	param3: [Component],
),
Event (
	name: "event_lock_initiated",
	description: "Event for when a target lock attempt is initiated (requires attribute attacker and/or target) (object = attacker if supplied, otherwise target object, param = the other object, param2 = locking weapon, param3 = target component)",
	object: [Ship, Station, Object],
	param: [Ship, Station, Object],
	param2: [weapon],
	param3: [Component],
),
Event (
	name: "event_lock_lost",
	description: "Event for when a target lock is lost (requires attribute attacker and/or target) (object = attacker if supplied, otherwise target object, param = the other object, param2 = locking weapon, param3 = target component)",
	object: [Ship, Station, Object],
	param: [Ship, Station, Object],
	param2: [Weapon],
	param3: [Component],
),
Event (
	name: "event_masstraffic_ship_removed",
	description: "Event for when a mass traffic ship is removed from a zone. If zone is provided then it is the event object (object = zone, param = mass traffic ship), otherwise object or group must be provided (object = mass traffic ship)",
	object: [Zone],
	param: [Ship],
),
Event (
	// TODO: review
	name: "event_illegal_activity_detected",
	description: "Event for when an object has been caught doing an illegal activity (see report_illegal_activity), like hacking or certain types of scanning (param = caught object, param2 = victim of the activity [optional])",
	param: [Entity, Object, Ship],
	param2: [Unknown], //victim of the activity???
),
Event (
	name: "event_object_approaching_waypoint",
	description: "Event for when a target waypoint is approached (but not necessarily yet reached) by a flying object (object = approaching object, param = remaining time)",
	object: [Ship],
	param: [Time],
),
Event (
	name: "event_object_arrived_at_waypoint",
	description: "Event for when a flying object arrives at a target waypoint (object = arriving object)",
	object: [Ship],
),
Event (
	name: "event_gravidar_has_scanned",
	description: "Event fired when the gravidar of an object has performed a scan (object = object of gravidar)",
	object: [Ship, Object],
),
Event (
	name: "event_object_attacked",
	description: "Event for the specified object being attacked (object = attacked object, param = attacker, param2 = kill method, param3 = attacked component)",
	object: [Ship, Station],
	param: [Ship, Station],
	param2: [Killmethod],
	param3: [Component],
),
Event (
	name: "event_object_attacked_object",
	description: "Event for when the specified object attacks an object (object = attacker, param = attacked object, param2 = kill method, param3 = attacked component)",
	object: [Ship, Station, Object],
	param: [Ship, Station, Object],
	param2: [Killmethod],
	param3: [Component],
),
Event (
	name: "event_object_shield_damaged",
	description: "Event for the specified object's shield being damaged (object = event source, param = damaged component, param2 = new shield value, param3 = damage)",
	object: [Ship, Station, Object],
	param: [Component],
	param2: [Hitpoints],
	param3: [Hitpoints],
),
Event (
	name: "event_object_hull_damaged",
	description: "Event for the specified object's hull being damaged - includes hulls of children (object = event source, param = damaged component, param2 = new hull value, param3 = damage)",
	object: [Ship, Station, Object],
	param: [Component],
	param2: [Hitpoints],
	param3: [Hitpoints],
),
Event (
	name: "event_object_hull_repaired",
	description: "Event for the specified object's hull being repaired - includes hulls of children (object = event source, param = repaired component, param2 = new hull value, param3 = repaired value)",
	object: [Ship, Station, Object],
	param: [Component],
	param2: [Hitpoints],
	param3: [Money],
),
Event (
	name: "event_object_hull_above_function_threshold",
	description: "Event for the specified components's hull climbing above the function threshold, rendering the object functional again - includes hulls of children (object = parent object, param = affected component)",
	object: [Object, Ship, Station],
	param: [Component],
),
Event (
	name: "event_object_hull_below_function_threshold",
	description: "Event for the specified components's hull falling below the function threshold, rendering the object non-functional - includes hulls of children (object = parent object, param = affected component)",
	object: [Object, Ship, Station],
	param: [Component],
),
Event (
	name: "event_object_abandoned",
	description: "Event for the specified object being abandoned by its NPCs (object = abandoned object)",
	object: [Object, Ship],
),
Event (
	name: "event_object_changed_attention",
	description: "Event for the specified object changing attention level (object = attention changing object, param = new attention level, param2 = previous attention level)",
	object: [Object, Ship],
	param: [Attention],
	param2: [Attention],
),
Event (
	name: "event_object_changed_cluster",
	description: "Event for the specified object changing cluster (object = cluster changing object, param = new cluster, param2 = previous cluster)",
	object: [Object, Ship],
	param: [Cluster],
	param2: [Cluster],
),
Event (
	name: "event_object_changed_object",
	description: "Event for the specified object changing object (object = object changing object, param = new object, param2 = previous object)",
	object: [Object],
	param: [Object],
	param2: [Object],
),
Event (
	name: "event_object_changed_owner",
	description: "Event for the specified object changing owner (object = owner changing object, param = new owner faction, param2 = previous owner faction)",
	object: [Object],
	param: [Faction],
	param2: [Faction],
),
Event (
	name: "event_object_changed_sector",
	description: "Event for the specified object changing sector (object = sector changing object, param = new sector, param2 = previous sector)",
	object: [Object, Ship],
	param: [Sector],
	param2: [Sector],
),
Event (
	name: "event_object_changed_true_owner",
	description: "Event for the specified object changing true owner (object = owner changing object, param = new true owner faction, param2 = previous true owner faction)",
	object: [Object],
	param: [Faction],
	param2: [Faction],
),
Event (
	name: "event_object_changed_room",
	description: "Event for the specified object changing room (object = room changing object, param = new room, param2 = previous room)",
	object: [Entity, NPC],
	param: [Room],
	param2: [Room],
),
Event (
	name: "event_object_changed_zone",
	description: "Event for the specified object changing zone (object = zone changing object, param = new zone, param2 = previous zone)",
	object: [Ship, Object],
	param: [Zone],
	param2: [Zone],
),
Event (
	name: "event_object_changed_state",
	description: "Event for the specified object changing state (object = state changing object, param = new state, param2 = previous state)",
	object: [Object],
	param: [Componentstate],
	param2: [Componentstate],
),
Event (
	name: "event_object_defencedronemode_changed",
	description: "Event for the specified object changing drone modes for its defence drones (object = object that launches drones, param = new drone mode)",
	object: [Ship, Station],
	param: [Dronemode],
),
Event (
	name: "event_object_miningdronemode_changed",
	description: "Event for the specified object changing drone modes for its mining drones (object = object that launches drones, param = new drone mode)",
	object: [Ship],
	param: [Dronemode],
),
Event (
	name: "event_object_transportdronemode_changed",
	description: "Event for the specified object changing drone modes for its transport drones (object = object where drones are based, param = new drone mode)",
	object: [Ship, Station],
	param: [Dronemode],
),
Event (
	name: "event_object_defencedrones_armed",
	description: "Event for the specified object authorizing defence drone use (object = object that launches drones)",
	object: [Ship, Station],
),
Event (
	name: "event_object_defencedrones_disarmed",
	description: "Event for the specified object unauthorizing defence drone use (object = object that launches drones)",
	object: [Ship, Station],
),
Event (
	name: "event_object_miningdrones_armed",
	description: "Event for the specified object authorizing mining drone use (object = object that launches drones)",
	object: [Ship, Station],
),
Event (
	name: "event_object_miningdrones_disarmed",
	description: "Event for the specified object unauthorizing mining drone use (object = object that launches drones)",
	object: [Ship, Station],
),
Event (
	name: "event_object_transportdrones_armed",
	description: "Event for the specified object authorizing transport drone use (object = object that launches drones)",
	object: [Station, Ship],
),
Event (
	name: "event_object_transportdrones_disarmed",
	description: "Event for the specified object unauthorizing transport drone use (object = object that launches drones)",
	object: [Ship, Station],
),
Event (
	name: "event_contained_object_changed_owner",
	description: "Event for any object within the specified space changing owner (object = space or container which contains the object, param = object changing ownership, param2 = new owner faction, param3 = previous owner faction)",
	object: [Zone, Sector, Cluster, Ship, Station],
	param: [Object],
	param2: [Faction],
	param3: [Faction],
),
Event (
	name: "event_contained_object_changed_true_owner",
	description: "Event for any object within the specified space changing true owner (object = space or container which contains the object, param = object changing ownership, param2 = new true owner faction, param3 = previous true owner faction)",
	object: [Zone, Sector, Cluster, Ship, Station],
	param: [Object],
	param2: [Faction],
	param3: [Faction],
),
Event (
	name: "event_contained_entity_changed_owner",
	description: "Event for any entity within the specified space changing owner (object = space or container which contains the entity, param = entity changing ownership, param2 = new owner faction, param3 = previous owner faction)",
	object: [Zone, Sector, Cluster, Ship, Station],
	param: [Entity],
	param2: [Faction],
	param3: [Faction],
),
Event (
	name: "event_contained_entity_changed_true_owner",
	description: "Event for any entity within the specified space changing true owner (object = space or container which contains the entity, param = entity changing ownership, param2 = new true owner faction, param3 = previous true owner faction)",
	object: [Zone, Sector, Cluster, Ship, Station],
	param: [Entity],
	param2: [Faction],
	param3: [Faction],
),
Event (
	name: "event_object_claimed",
	description: "Event for when an object is claimed or a NPC claims an object (requires attribute claimed and/or pilot) (do not use with player.entity) (object = claimed if supplied, otherwise pilot, param = the other object)",
	object: [Ship, NPC], // defaults to Ship
	param: [NPC], //can be ship, but if there is a ship, then it goes in object, so.....didn't put it there
),
Event (
	name: "event_object_collected_ammo",
	description: "Event for the specified object collecting ammo (object = collecting object, param = weapon macro, param2 = amount)",
	object: [Ship],
	param: [Macro],
	param2: [Integer],
),
Event (
	name: "event_object_collected_powerup",
	description: "Event for the specified object collecting a powerup (object = collecting object)",
	object: [Ship],
),
Event (
	name: "event_object_collected_resource",
	description: "Event for the specified object collecting a resource (object = collecting object, param = ware, param2 = amount)",
	object: [Ship],
	param: [Ware],
	param2: [Integer],
),
Event (
	name: "event_object_collected_ware",
	description: "Event for the specified object collecting a ware drop (object = collecting object, param = ware, param2 = amount, param3 = collected object)",
	object: [Ship],
	param: [Ware],
	param2: [Integer],
	param3: [Collectable],
),
Event (
	name: "event_object_collided",
	description: "Event for when the specified object collides (object = colliding object, param = other colliding object)",
	object: [Object, Ship, Station],
	param: [Object, Ship, Station],
),
Event (
	name: "event_object_construction_sequence_created",
	description: "Event for when the construction sequence for a station has been created, e.g. requested via create_construction_sequence; (object = station, param = constructionsequence if successful, param2 = true if successful)",
	object: [Station],
	param: [Constructionsequence],
	param2: [Boolean],
),
Event (
	name: "event_object_triggered",
	description: "Event for when an object is triggered (object = trigger object, param = triggerer)",
	object: [Object],
	param: [Object],
),
Event (
	name: "event_object_commander_set",
	description: "Event for when a subordinate receives a new commander (object = subordinate, param = new commander, param2 = previous commander, param3 = new assignment)",
	object: [Ship, Station],
	param: [Entity],
	param2: [Entity],
	param3: [Assignment],
),
Event (
	name: "event_object_changed_assignment",
	description: "Event for when a subordinate changes assignments without changing commander (object = source player/entity/subordinate/commander, param = subordinate, param2 = previous assignment, param3 = new assignment)",
	object: [Entity],
	param: [Ship],
	param2: [Assignment],
	param3: [Assignment],
),
Event (
	name: "event_object_activated_weapon",
	description: "Event for when a Controllable object activates a weapon (object = Controllable, param = Weapon, param2 = ammo type (null if unlimited), param3 = ammo amount (not set if unlimited))",
	object: [Ship, Station],
	param: [Weapon],
	param2: [Macro],
	param3: [Integer],
),
Event (
	name: "event_object_deactivated_weapon",
	description: "Event for when a Controllable object activates a weapon (object = Controllable, param = Weapon)",
	object: [Ship, Station],
	param: [Weapon],
),
Event (
	name: "event_object_activated_weapongroup",
	description: "Event for when a Controllable object activates a weapon group (object = Controllable, param = weapongroup index, param2 = true for primary, false for secondary group)",
	object: [Ship, Station],
	param: [Integer],
	param2: [Boolean],
),
Event (
	name: "event_object_deactivated_weapongroup",
	description: "Event for when a Controllable object deactivates a weapon group (object = Controllable, param = weapongroup index, param2 = true for primary, false for secondary group)",
	object: [Ship, Staton],
	param: [Integer],
	param2: [Boolean],
),
Event (
	name: "event_object_destroyed",
	description: "Event for the specified object being destroyed (object = destroyed object, param = killer, param2 = kill method, param3 = was parent killed)",
	object: [Object],
	param: [Object],
	param2: [Killmethod],
	param3: [Boolean],
),
Event (
	name: "event_object_docked",
	description: "Event for the specified object docking (object = docking object, param = dock object, param2 = zone)",
	object: [Ship],
	param: [Dockingbay],
	param2: [Zone],
),
Event (
	name: "event_object_docking_started",
	description: "Event for the specified object starting to dock (object = docking object, param = dock, param2 = zone)",
	object: [Ship],
	param: [Dockingbay],
	param2: [Zone],
),
Event (
	// TODO: review
	name: "event_object_docked_at",
	description: "Event for an object docking at the specified container (object = container object, param = docking object, param2 = new context, param3 = old context)",
	object: [Ship, Station],
	param: [Ship],
	param2: [Ship, Station],
	param3: [Component],
),
Event (
	name: "event_object_started_to_dock_at",
	description: "Event for an object starting to dock at the specified container (object = container object, param = docking object, param2 = new context, param3 = old context)",
	object: [Ship, Station],
	param: [Ship],
	param2: [Ship, Station],
	param3: [Component],
),
Event (
	name: "event_object_dock_assigned",
	description: "If object is a ship: Event for the specified object getting a free docking bay assigned for docking (object = docking ship)
            If object is a docking bay: Event for the specified object getting a ship assigned to it (object = assigned docking bay)
            If object is the player entity: Event for the player's ship context getting a free docking bay assigned (object = player)",
	object: [Ship, Dockingbay, Player],
),
Event (
	name: "event_object_dock_assigned_at",
	description: "Event for a ship being assigned to a dock of the specified container (object = container object, param = dock, param2 = assigned ship)",
	object: [Ship, Station],
	param: [Dockingbay],
	param2: [Ship],
),
Event (
	name: "event_object_dock_unassigned",
	description: "If object is a ship: Event for the specified object getting the dock unassigned for a docking bay (object = ship getting dock unassigned)
            If object is a docking bay: Event for the specified object getting a ship unassigned from it (object = unassigned docking bay)
            If object is the player entity: Event for the player's ship context getting the dock unassigned (object = player)",
	object: [Ship, Dockingbay, Player],
),
Event (
	name: "event_object_dock_unassigned_from",
	description: "Event for an unassigned dock of an object from the specified container (object = container object, param = dock unassigned object)",
	object: [Ship, Station],
	param: [Ship],
),
Event (
	name: "event_object_docking_denied",
	description: "Event for the specified object being denied docking (object = docking object)",
	object: [Ship],
),
Event (
	name: "event_object_docking_impossible",
	description: "Event for the specified object being incapable of docking (object = docking object, param = object that docking was requested at)",
	object: [Ship],
	param: [Ship, Station],
),
Event (
	name: "event_object_dock_too_far",
	description: "Event for the specified object being too far from the docking target (object = docking object)",
	object: [Ship],
),
Event (
	name: "event_object_docking_queued",
	description: "Event for the specified object being put into the queue for a free docking bay (object = docking object)",
	object: [Ship],
),
Event (
	name: "event_object_docking_aborted",
	description: "Event for the specified object having aborted a docking process (object = docking object, param = previously assigned docking bay)",
	object: [Ship],
	param: [Dockingbay],
),
Event (
	name: "event_object_undocking_cleared",
	description: "Event for the specified object being cleared to undock (object = docked object)",
	object: [Ship],
),
Event (
	name: "event_object_moved_into_internal_storage",
	description: "Event for the specified object having been moved into internal storage (object = stored object)",
	object: [Object],
),
Event (
	name: "event_object_retrieved_from_internal_storage",
	description: "Event for the specified object having been retrieved from internal storage (object = retrieved object)",
	object: [Object],
),
Event (
	name: "event_object_removed_from_formation",
	description: "Event for the specified object having been removed from a formation (object = removed object)",
	object: [Ship],
),
Event (
	name: "event_object_dropped_objects",
	description: "Event for the specified object dropping objects (object = dropping object, param = list of dropped objects)",
	object: [Ship, Station],
	param: [List], //list of dropped objects
),
Event (
	name: "event_object_drops_found",
	description: "Event for the specified object finding drops on its Gravidar scanner (object = scanning object, param = list of drops found)",
	object: [Ship],
	param: [List], //list of type Drop
),
Event (
	name: "event_object_enemy_found",
	description: "Event for the specified object finding an enemy on its Gravidar scanner (object = scanning object, param = enemy)",
	object: [Ship, Station],
	param: [Ship, Station],
),
Event (
	name: "event_object_entered_anomaly",
	description: "Event for the specified object entering an anomaly (object = entering object, param = entry anomaly, param2 = exit anomaly)",
	object: [Ship],
	param: [Object],
	param2: [Object],
),
Event (
	name: "event_venture_mission_completed",
	description: "Event for a venture mission being completed (param = venture detail list: [mission name, mission type], param2 = list of ships involved, param3 = duration)",
	param: [List],
	param2: [List],
	param3: [Time],
),
Event (
	name: "event_object_entered_gate",
	description: "Event for the specified object entering a gate (object = entering object, param = entry gate, param2 = exit gate)",
	object: [Ship],
	param: [Gate],
	param2: [Gate],
),
Event (
	name: "event_object_entered_live_view",
	description: "Event for when the object becomes visible on the gravidar of any player-owned object (object = entering object)",
	object: [Ship, Station, Object],
),
Event (
	name: "event_object_left_live_view",
	description: "Event for when the object is no longer visible on the gravidar of any player-owned object (object = leaving object)",
	object: [Object, Ship, Station],
),
Event (
	name: "event_player_alert",
	description: "Event for when a player alert is triggered (object = location (sector), param = alert message, param2 = sound id, param3 = object list)",
	object: [Sector],
	param: [String],
	param2: [String],
	param3: [List],
),
Event (
	name: "event_alert_level_changed",
	description: "Event for when the alert level of an object changes (object = object changing the alert level, param = new alert level string, param2 = old alert level string)",
	object: [Ship, Station, Object],
	param: [String],
	param2: [String],
),
Event (
	name: "event_traffic_level_changed",
	description: "Event for when the traffic level of an object changes (object = object changing the traffic level, param = new traffic level string, param2 = old traffic level string)",
	object: [Object],
	param: [String],
	param2: [String],
),
Event (
	name: "event_object_incoming_missile",
	description: "Event for when a missile is launched at the specified object (object = target object, param = target component, param2 = missile, param3 = missile source)",
	object: [Ship, Station, Object],
	param: [Component],
	// TODO: review
	param2: [Component],
	param3: [Ship, Station],
),
Event (
	name: "event_object_killed_object",
	description: "Event for when the specified object kills an object/component (object = killer, param = killed object/component, param2 = kill method)",
	object: [Ship, Station],
	param: [Ship, Station, Component],
	param2: [Killmethod],
),
Event (
	name: "event_object_launched_missile",
	description: "Event for the specified object launching a missile (object = missile launching object, param = target component, param2 = missile)",
	object: [Ship, Station],
	param: [Component],
	param2: [Component],
),
Event (
	name: "event_object_money_updated",
	description: "Event for when the objects' money gets updated (object = container of the account, param = oldamount, param2 = newamount)",
	object: [Container],
	param: [Money],
	param2: [Money],
),
Event (
	name: "event_object_order_ready",
	description: "Event for when an AI order in an object's order queue gets enabled (entering the ready state), when the default order gets enabled,
            or when there is a new current order that should be started, even if already enabled before (object = the object receiving the order, param = order)",
	object: [Ship],
	param: [Order],
),
Event (
	name: "event_object_order_cancelled",
	description: "Event for when the a running AI order is cancelled (object = the order's owner object, param = order, param2 = true iff the order is not in the critical state and is cancelled immediately).
            NOTE: If param2 is true then the order (event.param) was already cancelled and was either reset or does not exist any more.",
	object: [Ship],
	param: [Order],
	param2: [Boolean],
),
Event (
	name: "event_object_order_finished",
	description: "Event for when the running AI order is finished (object = the order's owner object, param = order).
            Note that it is possible that the order no longer exists.",
	object: [Ship],
	param: [Order],
),
Event (
	name: "event_object_order_param_edited",
	description: "Event for when a parameter of a running AI order in the critical state is edited (object = the order's owner object, param = order, param2 = order param name, param3 = order param value)",
	object: [Ship],
	param: [String],
	param2: [String],
),
Event (
	name: "event_object_order_syncpoint_released",
	description: "Event for when the sync point of an infinite AI order in an object's order queue gets released, indicating that the order should finish (object = the order's owner object, param = order)",
	object: [Ship],
	param: [Order],
),
Event (
	name: "event_object_picked_up",
	description: "Event for when the specified object is picked up by another object (object = pickup, param = collector)",
	object: [Collectable],
	param: [Ship],
),
Event (
	name: "event_object_picked_up_object",
	description: "Event for when the specified object picks up another object (object = collector, param = pickup)",
	object: [Ship],
	param: [Collectable],
),
Event (
	name: "event_object_signalled",
	description: "Event for the specified object being signalled (object = signalled object, param = custom, usually to specify type of signal, param2 = custom, param3 = custom)",
	object: [Object],
	param: [String],
	param2: [Unknown],
	param3: [Unknown],
),
Event (
	name: "event_object_subordinate_added",
	description: "Event for when a new subordinate is added to a commander (object = new commander, param = subordinate, param2 = new assignment)",
	object: [Ship, Station],
	param: [Ship],
	param2: [Assignment],
),
Event (
	name: "event_object_subordinate_removed",
	description: "Event for when a subordinate is removed from a commander (object = old commander, param = subordinate, param2 = old commander)",
	object: [Ship, Station],
	param: [Ship],
	param2: [Ship, Station],
),
Event (
	name: "event_object_target_invalid",
	description: "Event for when an object's target is invalid, e.g. went through a jump gate, does not exist any more etc. (object = object with an invalid target, param = invalid target, param2 = true iff the target is actually not reachable)",
	object: [Ship, Station],
	param: [Object],
	param2: [Boolean],
),
Event (
	name: "event_object_undocked",
	description: "Event for the specified object undocking (object = undocking object, param = dock, param2 = zone)",
	object: [Ship],
	param: [Dockingbay],
	param2: [Zone],
),
Event (
	name: "event_object_undocking_started",
	description: "Event for the specified object starting to undock (object = undocking object, param = dock, param2 = zone)",
	object: [Ship],
	param: [Dockingbay],
	param2: [Zone],
),
Event (
	name: "event_object_undocked_from",
	description: "Event for an object undocking from the specified container (object = container object, param = undocking object, param2 = new context, param3 = old context)",
	object: [Ship, Station],
	param: [Ship],
	param2: [Ship, Station],
	param3: [Ship, Station, Zone, Sector, Cluster],
),
Event (
	name: "event_object_started_to_undock_from",
	description: "Event for an object starting to undock from the specified container (object = container object, param = undocking object, param2 = new context, param3 = old context)",
	object: [Ship, Station],
	param: [Ship],
	param2: [Ship, Station],
	param3: [Ship, Station, Zone, Sector, Cluster],
),
Event (
	name: "event_god_created_station",
	description: "Event for god creating a station (object = containing space, param = station)",
	object: [Space],
	param: [Station],
),
Event (
	name: "event_god_created_factory",
	description: "Event for god creating a base factory with the modules to be constructed (object = containing space, param = station, param2 = list of module macros)",
	object: [Space],
	param: [Station],
	param2: [List],
),
Event (
	name: "event_god_created_object",
	description: "Event for god creating an object (object = containing space, param = object)",
	object: [Space],
	param: [Object],
),
Event (
	name: "event_object_weaponmode_changed",
	description: "Event for the specified object changing a weapon mode (object = object changing the weapon mode, param = weapon, param2 = new weapon mode)",
	object: [Ship, Station],
	param: [Weapon],
	param2: [Weaponmode],
),
Event (
	name: "event_object_entered",
	description: "Event on an object or a space, e.g. zone, for when any object enters it or is created in it (object = entered space/container, param = entering object, param2 = new context of entering object, param3 = old context of entering object).",
	object: [Space, Container],
	param: [Ship, Object],
	param2: [Zone, Sector, Cluster],
	param3: [Space, Container],
),
Event (
	name: "event_object_left",
	description: "Event on an object or a space, e.g. zone, for when any object leaves it or is removed (object = left space/container, param = leaving object, param2 = new context of leaving object, param3 = old context of leaving object).",
	object: [Space, Container],
	param: [Ship, Object],
	param2: [Space, Container],
	param3: [Space, Container],
),
Event (
	name: "event_entity_entered",
	description: "Event on an object or a space, e.g. zone, for when any entity enters it or is created in it (object = entered space/room/container, param = entering entity, param2 = new context of entering entity, param3 = old context of entering entity).",
	object: [Space, Room, Container],
	param: [Entity],
	param2: [Space, Room, Container],
	param3: [Space, Room, Container],
),
Event (
	name: "event_entity_left",
	description: "Event on an object or a space, e.g. zone, for when any entity leaves it or is removed (object = left space/room/container, param = leaving entity, param2 = new context of leaving entity, param3 = old context of leaving entity).",
	object: [Space, Room, Container],
	param: [Entity],
	param2: [Space, Room, Container],
	param3: [Space, Room, Container],
),
Event (
	name: "event_object_bomb_attached",
	description: "Event is raised when a bomb has been successfully attached to a target - if you want to listen to it being detached, use event_object_killed with killmethod.detached (object = target that the bomb is attached to, param = bomb that was attached)",
	object: [Ship, Station, Object],
	param: [Object],
),
Event (
	name: "event_player_attacked_object",
	description: "Event for when the player attacks an object from their currently controlled object (param = attacked object, param2 = kill method, param3 = attacked component)",
	param: [Ship, Station, Object],
	param2: [Killmethod],
	param3: [Component],
),
Event (
	name: "event_player_boost_charging_aborted",
	description: "Event for when the player aborts charging boost",
	object: [Player],
),
Event (
	name: "event_player_boost_charging_started",
	description: "Event for when the player starts charging boost",
	object: [Player],
),
Event (
	name: "event_player_boost_started",
	description: "Event for when the player starts boosting",
	object: [Player],
),
Event (
	name: "event_player_boost_stopped",
	description: "Event for when the player stops boosting",
	object: [Player],
),
Event (
	name: "event_player_build_plot_changed",
	description: "Event for when a player-owned station's build plot is resized or repositioned (param = station, param2 = old build plot max, param3 = old build plot center)",
	param: [Station],
	param2: [Vector],
	param3: [Vector],
),
Event (
	name: "event_player_paid_build_plot_changed",
	description: "Event for when a player-owned station's paid build plot is resized or repositioned (param = station, param2 = old paid build plot size)",
	param: [Station],
	param2: [Vector],
),
Event (
	name: "event_player_build_started",
	description: "Event for when a player-owned build starts (param = buildprocessor, param2 = constructionsequence, param3 = buildtask)",
	param: [Buildprocessor],
	param2: [Constructionsequence],
	param3: [Build],
),
Event (
	name: "event_player_build_finished",
	description: "Event for when a player-owned build finishes (param = buildprocessor, param2 = unused, param3 = buildtask)",
	param: [Buildprocessor],
	param3: [Build],
),
Event (
	name: "event_player_build_finished_components",
	description: "Event for when a player-owned build partially finishes. List of completed components is provided. (param = buildprocessor, param2 = list of completed components, param3 = buildtask)",
	object: [Buildprocessor],
	param: [List], //of complete components
	param2: [Build],
),
Event (
	name: "event_player_build_cancelled",
	description: "Event for when a player-owned build is cancelled (param = buildprocessor, param2 = constructionsequence, param3 = buildtask)",
	param: [Buildprocessor],
	param2: [Constructionsequence],
	param3: [Build],
),
Event (
	name: "event_player_built_ship",
	description: "Event for when a player-owned ship is constructed to operational state (param = ship, param2 = buildtask)",
	param: [Ship],
	param2: [Build],
),
Event (
	name: "event_player_built_station",
	description: "Event for when a player-owned station is constructed to operational state (param = station, param2 = buildtask)",
	param: [Station],
	param2: [Build],
),
Event (
	name: "event_player_build_loadout_applied",
	description: "Event for when a player-owned build has applied a loadout to the build component. List of added components is provided. (param = buildprocessor, param2 = new components, param3 = buildtask)",
	param: [Buildprocessor],
	param2: [List], //new components
	param3: [Build],
),
Event (
	name: "event_player_production_started",
	description: "Event for when a player-owned productionmodule has started production of a ware (param = productionmodule, param2 = product ware, param3 = whether this is a research project) (see also event_player_production_finished)",
	param: [Module],
	param2: [Ware],
	param3: [Boolean],
),
Event (
	name: "event_player_production_finished",
	description: "Event for when a player-owned productionmodule has finished production of a ware (param = productionmodule, param2 = product ware, param3 = whether this was a research project) (see also event_player_production_started)",
	param: [Module],
	param2: [Ware],
	param3: [Boolean],
),
Event (
	name: "event_player_production_cancelled",
	description: "Event for when a player-owned productionmodule has cancelled its production queue (param = productionmodule, param2 = whether a research project was cancelled, param3 = list of cancelled product wares)",
	param: [Module],
	param2: [Boolean],
	param3: [List], //list of wares
),
Event (
	name: "event_player_changed_activity",
	description: "Event for when the player changes activity (param = new activity, param2 = old activity)",
	param: [Activity],
	param2: [Activity],
),
Event (
	name: "event_player_changed_target",
	description: "Event for when the player changes target (param = new target. null if player deselects target.)",
	param: [Object, Ship, Station],
),
Event (
	name: "event_player_interaction",
	description: "Event for when a player responds to an interactive notification (param = interaction param, param2 = secondary interaction param)",
	param: [Unknown],
	param2: [Unknown],
),
Event (
	name: "event_player_teleport_successful",
	description: "Event for when the player successfully teleports. (param = new room, param2 = old room, param3 = is shortcut instead of real teleport)",
	param: [Room],
	param2: [Room],
	param3: [Boolean],
),
Event (
	name: "event_player_teleport_failed",
	description: "Event for when the player failed to teleport. (param = destination room, param2 = is shortcut instead of real teleport)",
	param: [Room],
	param2: [Boolean],
),
Event (
	name: "event_player_owned_attacked",
	description: "Event for when a player owned object is attacked (object = attacked object, param = attacker, param2 = kill method, param3 = attacked component)",
	object: [Object],
	param: [Ship, Station],
	param2: [Killmethod],
	param3: [Component],
),
Event (
	name: "event_player_owned_attacked_object",
	description: "Event for when a player owned object, including the player, attacks another object (param = attacker, param2 = attacked object, param3 = kill method)",
	param: [Ship, Station],
	param2: [Object],
	param3: [Killmethod],
),
Event (
	name: "event_player_owned_claimed_object",
	description: "Event for when the player faction claims an object (param = claimed object, param2 = pilot)",
	param: [Ship],
	param2: [Entity],
),
Event (
	name: "event_player_ship_hit",
	description: "Event for when the player controlled ship or ship context is hit by a projectile (param = attacked object, param2 = attacker, param3 = projectile)",
	param: [Ship],
	param2: [Ship, Station],
	param3: [Object],
),
Event (
	name: "event_player_collected_ammo",
	description: "Event for when the player collects ammo (param = weapon macro, param2 = amount)",
	param: [Macro],
	param2: [Integer],
),
Event (
	name: "event_player_crafted_ammo",
	description: "Event for when the player crafts ammo from inventory wares (param = weapon macro, param2 = amount)",
	param: [Macro],
	param2: [Integer],
),
Event (
	name: "event_player_collected_powerup",
	description: "Event for when the player collects a powerup",
	object: [Player],
),
Event (
	name: "event_player_collected_ware",
	description: "Event for when the player collects a ware drop (param = ware, param2 = amount, param3 = collected object)",
	param: [Ware],
	param2: [Integer],
	param3: [Collectable],
),
Event (
	name: "event_player_commission_added",
	description: "Event for when a commission for the player is added (object = source object or source faction, param = display name, param2 = commission amount, param3 = end time)",
	object: [Faction, Station],
	param: [String],
	param2: [Unknown],
	param3: [Time],
),
Event (
	name: "event_player_discount_added",
	description: "Event for when a discount for the player is added (object = source object or source faction, param = display name, param2 = discount amount, param3 = end time)",
	object: [Faction, Station],
	param: [String],
	param2: [Unknown],
	param3: [Time],
),
Event (
	name: "event_player_activated_weapon",
	description: "Event for when the player ship activates a weapon (param = Weapon, param2 = ammo type (null if unlimited), param3 = ammo amount (not set if unlimited))",
	param: [Weapon],
	param2: [Macro],
	param3: [Integer],
),
Event (
	name: "event_player_deactivated_weapon",
	description: "Event for when the player ship deactivates a weapon (param = Weapon)",
	param: [Weapon],
),
Event (
	name: "event_player_activated_weapongroup",
	description: "Event for when the player ship activates a weapon group (param = weapongroup index, param2 = true for primary, false for secondary group)",
	param: [Integer],
	param2: [Boolean],
),
Event (
	name: "event_player_deactivated_weapongroup",
	description: "Event for when the player ship deactivates a weapon group (param = weapongroup index, param2 = true for primary, false for secondary group)",
	param: [Integer],
	param2: [Boolean],
),
Event (
	name: "event_player_created",
	description: "Event for when the player is created (no parameters)",
),
Event (
	name: "event_player_discovered_object",
	description: "Event for when an object (station module, station, ship, ...) is discovered or scanned by the player and added to the scan memory (param = object, param2 = scan level)",
	param: [Object],
	param2: [Integer],
),
Event (
	name: "event_player_detected_object",
	description: "Event for when an object is detected by the player and added to the long range scan memory (param = object)",
	param: [Object],
),
Event (
	name: "event_player_discovered_mission_offer",
	description: "Event for when a mission offer is discovered by the player and added to the mission offer memory (param = mission offer cue)",
	param: [Cue],
),
Event (
	name: "event_player_hacked_object",
	description: "Event for when an object is hacked by the player (param = hacked, param2 = hacker, param3 = control panel type)",
	param: [Object],
	param2: [Entity],
	param3: [Controlpaneltype],
),
Event (
	name: "event_player_incoming_missile",
	description: "Event for when a missile is launched at the player (param = target component, param2 = missile, param3 = missile source)",
	param: [Component],
	param2: [Object],
	param3: [Ship, Station],
),
Event (
	name: "event_player_killed_object",
	description: "Event for when the player kills an object from their currently controlled object (param = killed object, param2 = kill method)",
	param: [Object],
	param2: [Killmethod],
),
Event (
	name: "event_player_launched_missile",
	description: "Event for when the player launches a missile (param = target component, param2 = missile)",
	param: [Component],
	param2: [Object],
),
Event (
	name: "event_player_licence_added",
	description: "Event for when the player is granted a licence for another faction (param = licenceref, use .type or .faction)",
	param: [Licence],
),
Event (
	name: "event_player_licence_lost",
	description: "Event for when the player has lost a licence for another faction (param = licenceref, use .type or .faction)",
	param: [Licence],
),
Event (
	name: "event_player_money_updated",
	description: "Event for when the player money gets updated (param = oldamount, param2 = newamount)",
	param: [Money],
	param2: [Money],
),
Event (
	name: "event_player_owned_collected_resource",
	description: "Event for when a player owned object has collected a resource (object = collecting object, param = ware, param2 = amount)",
	object: [Ship],
	param: [Ware],
	param2: [Integer],
),
Event (
	name: "event_player_owned_destroyed",
	description: "Event for when a player owned object was killed (param = killed object, param2 = killer object, param3 = kill method)",
	object: [Object],
	param: [Ship, Station],
	param2: [Killmethod],
),
Event (
	name: "event_player_owned_killed_object",
	description: "Event for when a player owned object, including player, kills an object (param = killer object, param2 = killed object, param3 = kill method)",
	param: [Ship, Station],
	param2: [Object],
	param3: [Killmethod],
),
Event (
	name: "event_player_owned_money_updated",
	description: "Event for when a player-owned object's money gets updated (object = account holder, param = oldamount, param2 = newamount)",
	object: [Container],
	param: [Money],
	param2: [Money],
),
Event (
	name: "event_player_opened_crate",
	description: "Event for when the player opens a crate and claims all its content (param = crate)",
	param: [Object],
),
Event (
	name: "event_player_out_of_ammo",
	description: "Event for when the player's current weapon runs out of ammo (param = weapon macro, param2 = ranout of ammo due to the shot)",
	param: [Macro],
	param2: [Boolean],
),
Event (
	name: "event_player_relation_changed",
	description: "Event for when a faction or an object's control entity changes the relation towards the player (object = entity or null, param = faction or null, param2 = [new relation, old relation], param3 = relationchangereason).
            NOTE: On permanent faction changes, object is null. On relation boosts, object is non-null, and param is either null (silent boost) or faction.player (non-silent boost).
            See set_relation_boost; and add_relation_boost.",
	object: [Entity],
	param: [Faction],
	param2: [List], //old and new relation values
	param3: [String],
),
Event (
	name: "event_player_started_control",
	description: "Event for when the player starts control",
),
Event (
	name: "event_player_stopped_control",
	description: "Event for when the player stops control",
),
Event (
	name: "event_player_subordinate_added",
	description: "Event for when the player adds a new subordinate to squad (param = subordinate)",
	param: [Ship],
),
Event (
	name: "event_player_subordinate_removed",
	description: "Event for when the player removes a subordinate from squad (param = subordinate)",
	param: [Ship],
),
Event (
	name: "event_player_trade_discovered",
	description: "Event for when a trade is discovered by the player and added to the trade memory (param = tradeoffer)",
	param: [Trade],
),
Event (
	name: "event_player_trade_cancelled",
	description: "Event for when a player trade is cancelled (param = tradeoffer)",
	param: [Trade],
),
Event (
	name: "event_player_trade_completed",
	description: "Event for when the player completes a trade (param = tradeoffer)",
	param: [Trade],
),
Event (
	name: "event_player_trade_started",
	description: "Event for when the player starts a trade (param = tradeoffer)",
	param: [Trade],
),
Event (
	name: "event_player_lost_volatile_wares",
	description: "Event for when volatile wares in the player's inventory self-destruct (param = table of lost volatile wares with corresponding amounts)",
	param: [Table],
),
Event (
	name: "event_player_travelmode_charge_started",
	description: "Event is raised when the player ship travel mode begins charging (param = time when the mode is fully charged)",
	param: [Time],
),
Event (
	name: "event_player_travelmode_charge_aborted",
	description: "Event is raised when the player ship travel mode aborts an ongoing charging process",
),
Event (
	name: "event_player_travelmode_started",
	description: "Event is raised when the player ship travel mode is done charging",
),
Event (
	name: "event_player_travelmode_stopped",
	description: "Event is raised when the player ship travel mode has stopped",
),
Event (
	name: "event_player_signal_unlock_started",
	description: "Event is raised when the player begins unlocking a signal leak (param = signal leak being unlocked)",
	param: [Signalleak],
),
Event (
	name: "event_player_signal_unlock_failed",
	description: "Event is raised when the player fails to unlock a signal leak (param = signal leak being unlocked)",
	param: [Signalleak],
),
Event (
	name: "event_player_signal_unlock_finished",
	description: "Event is raised when the player has successfully unlock a signal leak (param = signal leak being unlocked, param2 = object that the signal leak was attached to)",
	param: [Signalleak],
	param2: [Ship, Station],
),
Event (
	name: "event_player_signal_unlock_impossible",
	description: "Event is raised when the player is not currently able to unlock a signal leak (param = signal leak being unlocked)",
	param: [Signalleak],
),
Event (
	name: "event_player_repaired_signal_leak",
	description: "Event is raised when the player has repaired a signal leak (param = signal leak that was repaired, param2 = object that the signal leak was attached to)",
	param: [Signalleak],
	param2: [Ship, Station],
),
Event (
	name: "event_player_unlocked_platform_trigger",
	description: "Event is raised when the player has successfully unlocked a platform trigger (e.g. a button, panel, door) that required wares to be consumed in order to activate (param = trigger component, param2 = trigger group tag)",
	param: [Component],
	param2: [Tag],
),
Event (
	name: "event_player_activated_platform_trigger",
	description: "Event is raised when the player has manually activated a platform trigger (e.g. a button or panel) (param = trigger component, param2 = trigger group tag)",
	param: [Component],
	param2: [Tag],
),
Event (
	name: "event_player_bomb_attached",
	description: "Event is raised when the player or a player-owned object has successfully attached a bomb (param = bomb that was attached)",
	param: [object],
),
Event (
	name: "event_player_blueprint_added",
	description: "Event is raised when the player has unlocked a blueprint (param = blueprint's module macro, param2 = blueprint's ware)",
	param: [Macro],
	param2: [Ware],
),
Event (
	name: "event_player_created_signal_leaks",
	description: "Event is raised when the player has created signal leaks (param = list of signal leaks)",
	param: [List], //of signalleaks
),
Event (
	name: "event_player_entered_anomaly",
	description: "Event for the player entering an anomaly (param = entry anomaly, param2 = exit anomaly)",
	param: [Object],
	param2: [Object],
),
Event (
	name: "event_player_entered_gate",
	description: "Event for the player entering a gate (param = entry gate, param2 = exit gate)",
	param: [Gate],
	param2: [Gate],
),
Event (
	name: "event_player_activated_cockpit_view",
	description: "Event for the player setting the camera to cockpit view (also triggered if the camera was already in this view)",
),
Event (
	name: "event_player_activated_external_view",
	description: "Event for the player setting the camera to external view (also triggered if the camera was already in this view)",
),
Event (
	name: "event_player_activated_external_target_view",
	description: "Event for the player setting the camera to external target view (also triggered if the camera was already in this view)",
),
Event (
	name: "event_player_activated_floating_view",
	description: "Event for the player setting the camera to floating view (also triggered if the camera was already in this view)",
),
Event (
	name: "event_player_toggled_hud",
	description: "Event for the player toggling HUD rendering",
),
Event (
	name: "event_player_toggled_cockpit",
	description: "Event for the player toggling cockpit rendering",
),
Event (
	name: "event_player_cycled_active_weapon_ammo",
	description: "Event for the player cycling the ammunition of active weapons",
),
Event (
	name: "event_player_fired_empty_weapon_group",
	description: "Event for the player attempting to fire a weapon group that has no active weapons in it (param = true if it's a primary, false if it's a secondary weapon group)",
	param: [Boolean],
),
Event (
	name: "event_autopilot_target_set",
	description: "Event for when the player has engaged the autopilot (param = target, param2 = next target on the way to target which may be identical to target)",
	param: [Object],
	param2: [Object],
),
Event (
	name: "event_game_loaded",
	description: "Event for when the game has completed loading a savegame (param = gameversion, param2 = build number, param3 = original gameversion of savegame)",
	param: [Integer],
	param2: [Integer],
	param3: [Integer],
),
Event (
	name: "event_game_saved",
	description: "Event for when the game has completed saving a savegame (param = success)",
	param: [Boolean],
),
Event (
	name: "event_game_started",
	description: "Event for when a new game has been started and the universe populated (param = list of selected gamestart options)",
	param: [List], //gamestart options
),
Event (
	name: "event_scan_aborted",
	description: "Event for when a (deep)scan is aborted (requires attribute scanner and/or scanned) (object = scanner if supplied, otherwise scanned, param = the other object, param2 = true iff object is scanner)",
	object: [Ship, Object],
	param: [Object],
	param2: [Boolean],
),
Event (
	name: "event_scan_finished",
	description: "Event for when a (deep)scan is finished (requires attribute scanner and/or scanned) (object = scanner if supplied, otherwise scanned, param = the other object, param2 = true iff object is scanner)",
	object: [Object],
	param: [Object],
	param2: [Boolean],
),
Event (
	name: "event_scan_started",
	description: "Event for when a (deep)scan is started (requires attribute scanner and/or scanned) (object = scanner if supplied, otherwise scanned, param = the other object, param2 = true iff object is scanner)",
	object: [Object],
	param: [Object],
	param2: [Boolean],
),
Event (
	name: "event_object_hacked",
	description: "Event for when an object is hacked (requires attribute hacker and/or hacked) (object = hacker if supplied, otherwise hacked, param = the other object, param2 = true iff object is hacker)",
	object: [Object],
	param: [Object],
	param2: [Boolean],
),
Event (
	name: "event_observation_started",
	description: "Event for when an object starts an observation (requires attribute observer and/or observed) (object = observer or observed, param = observer, param2 = observed, param3 = range length)",
	object: [Object],
	param: [Object],
	param2: [Object],
	param3: [Length],
),
Event (
	name: "event_observation_stopped",
	description: "Event for when an observation is stopped (requires attribute observer and/or observed) (object = observer or observed, param = observer, param2 = observed)",
	object: [Object],
	param: [Object],
	param2: [Object],
),
Event (
	name: "event_attack_started",
	description: "Event for when an object signals it will attack a target (requires attribute attacker and/or target) (object = attacker or target, param = attacker, param2 = target)",
	object: [Object],
	param: [Object],
	param2: [Object],
),
Event (
	name: "event_attack_stopped",
	description: "Event for when an object signals it will stop an attack (requires attribute attacker and/or target) (object = attacker or target, param = attacker, param2 = target)",
	object: [Object],
	param: [Object],
	param2: [Object],
),
Event (
	name: "event_speak_finished",
	description: "Event for when an actor has finished speaking (object = actor, param = page, param2 = line, param3 = interrupted - 0 if fully finished, 1 if interrupted, 2 if not even started).
            NOTE: The page and line parameters match the text entry that was passed to the speak system before resolving any text references. The event is fired even if the speak fails due to
            priority being too low or if it is interrupted. In case of a sequence of multiple text entries, page and line match the first provided page/line pair, not the last one.",
	object: [Entity],
	param: [Integer],
	param2: [Integer],
	param3: [Integer],
),
Event (
	name: "event_speak_line_finished",
	description: "Event for when an actor has finished speaking a single text line, possibly a part of a speech with multiple lines (object = actor, param = page, param2 = line).
            NOTE: Unlike event_speak_finished, this event requires the actor to be specified, and the parameters page and line match the exact spoken text entry after the resolution of text references.
            WARNING: The event is not fired if the speech cannot start or if it gets interrupted before the end of the line. Combine with event_speak_finished in a check_any block to handle those cases as well.",
	object: [Entity],
	param: [Integer],
	param2: [Integer],
),
Event (
	name: "event_trade_cancelled",
	description: "Event for when a trade is cancelled, (object = either buyer or seller - see following documentation, param = tradeoffer) (If tradeoffer is provided, listened object = tradeoffer owner) : (otherwise buyer and/or seller must be provided, listened object = seller if supplied, otherwise buyer)",
	object: [Object],
	param: [Trade],
),
Event (
	name: "event_trade_completed",
	description: "Event for when a trade is completed (object = either buyer or seller - see following documentation, param = tradeoffer) (If tradeoffer is provided, listened object = tradeoffer owner) : (otherwise buyer and/or seller must be provided, listened object = seller if supplied, otherwise buyer)",
	object: [Object],
	param: [Trade],
),
Event (
	name: "event_trade_started",
	description: "Event for when a trade is started (object = either buyer or seller - see following documentation, param = tradeoffer) (If tradeoffer is provided, listened object = tradeoffer owner) : (otherwise buyer and/or seller must be provided, listened object = seller if supplied, otherwise buyer)",
	object: [Object],
	param: [Trade],
),
Event (
	name: "event_detached_from_masstraffic",
	description: "Event for when an object has been detached from all mass traffic networks that restrict its movement (object = detached object)",
	object: [Object],
),
Event (
	name: "event_masstraffic_network_removed",
	description: "Event for when a mass traffic network has been removed (object = the zone that owned the network, param = the removed network's ID)",
	object: [Zone],
	param: [String],
),
Event (
	name: "event_weapon_fired",
	description: "Event for the specified weapon firing (object = the weapon, param = fired bullet/missile/bomb)",
	object: [Weapon],
	param: [Object],
),
Event (
	name: "event_weapon_overheated",
	description: "Event for the specified weapon overheating (object = the weapon)",
	object: [Weapon],
),
Event (
	name: "event_object_launched_countermeasure",
	description: "Event for an object launching a countermeasure (object = the launching defensible, param = launched countermeasure)",
	object: [Ship],
	param: [Object],
),
Event (
	name: "event_object_launched_mine",
	description: "Event for an object launching a mine (object = the launching defensible, param = launched mine)",
	object: [Ship],
	param: [Object],
),
Event (
	name: "event_object_launched_lasertower",
	description: "Event for an object launching a lasertower (object = the launching defensible, param = launched lasertower)",
	object: [Ship],
	param: [Object],
),
Event (
	name: "event_lasertower_launched",
	description: "Event for lasertower being launched (object = the space which the laser tower was launched in, param = the launching defensible, param2 = launched lasertower)",
	object: [Space],
	param: [Ship],
	param2: [Object],
),
Event (
	name: "event_mine_launched",
	description: "Event for mine being launched (object = the space which the mine was launched in, param = the launching defensible, param2 = launched mine)",
	object: [Space],
	param: [Ship],
	param2: [Object],
),
Event (
	name: "event_object_launched_navbeacon",
	description: "Event for an object launching a navigation beacon (object = the launching defensible, param = launched navigation beacon)",
	object: [Ship],
	param: [Object],
),
Event (
	name: "event_navbeacon_launched",
	description: "Event for navbeacon being launched (object = the space which the navbeacon was launched in, param = the launching defensible, param2 = launched navbeacon)",
	object: [Space],
	param: [Ship],
	param2: [Object],
),
Event (
	name: "event_object_launched_satellite",
	description: "Event for an object launching a satellite (object = the launching defensible, param = launched satellite)",
	object: [Ship],
	param: [Object],
),
Event (
	name: "event_satellite_launched",
	description: "Event for satellite being launched (object = the space which the satellite was launched in, param = the launching defensible, param2 = launched satellite)",
	object: [Space],
	param: [Ship],
	param2: [Object],
),
Event (
	name: "event_object_launched_resourceprobe",
	description: "Event for an object launching a resourceprobe (object = the launching defensible, param = launched resourceprobe)",
	object: [Ship],
	param: [Object],
),
Event (
	name: "event_resourceprobe_launched",
	description: "Event for resourceprobe being launched (object = the space which the resource probe was launched in, param = the launching defensible, param2 = launched resourceprobe)",
	object: [Space],
	param: [Ship],
	param2: [Object],
),
Event (
	name: "event_object_launched_distressdrone",
	description: "Event for an object launching a distress drone (object = the launching defensible, param = launched distress drone)",
	object: [Ship],
	param: [Object],
),
Event (
	name: "event_distressdrone_launched",
	description: "Event for a distress drone being launched (object = the space which the distress drone was launched in, param = the launching distress drone, param2 = launched distress drone)",
	object: [Space],
	param: [Ship],
	param2: [Object],
Event (
	name: "event_inventory_added",
	description: "Event for when inventory wares were added to entity (object = entity, param = table of wares with corresponding amounts)",
	object: [Entity],
	param: [Table],
),
Event (
	name: "event_inventory_removed",
	description: "Event for when inventory wares were removed from entity (object = entity, param = table of wares with corresponding amounts)",
	object: [Entity],
	param: [Table],
),
Event (
	name: "event_supplies_added",
	description: "Event for when supply wares were added to container object (object = container, param = table of wares with corresponding amounts)",
	object: [Container],
	param: [Table],
),
Event (
	name: "event_supplies_removed",
	description: "Event for when supply wares were removed from container object (object = container, param = table of wares with corresponding amounts)",
	object: [Container],
	param: [Table],
),
Event (
	name: "event_supply_orders_added",
	description: "Event for when supply orders(as wares) were added to container object (object = container, param = table of wares with corresponding amounts)",
	object: [Station],
	param: [Table],
),
Event (
	name: "event_supply_orders_removed",
	description: "Event for when supply orders(as wares) were removed from container object (object = container, param = table of wares with corresponding amounts)",
	object: [Station],
	param: [Table],
),
Event (
	name: "event_object_production_started",
	description: "Event for when an object has started production of a ware (object = container or productionmodule, param = productionmodule, param2 = product ware, param3 = whether this is a research project) (see also event_object_production_finished)",
	object: [Station, Module],
	param: [Module],
	param2: [Ware],
	param3: [Boolean],
),
Event (
	name: "event_object_production_finished",
	description: "Event for when an object has finished production of a ware (object = container or productionmodule, param = productionmodule, param2 = product ware, param3 = whether this was a research project) (see also event_object_production_started)",
	object: [Station, Module],
	param: [Module],
	param2: [Ware],
	param3: [Boolean],
),
Event (
	name: "event_object_production_cancelled",
	description: "Event for when an object has cancelled its production queue (object = container or productionmodule, param = productionmodule, param2 = whether a research project was cancelled, param3 = list of cancelled product wares)",
	object: [Station],
	param: [Module],
	param2: [Boolean],
	param3: [List], //of cancelled wares
),
Event (
	name: "event_object_props_generated",
	description: "Event for when an object has had props generated (object = the populated component or its container, param = component which was populated)",
	object: [Component, Container],
	param: [Component],
),
Event (
	name: "event_object_props_despawning",
	description: "Event for when an object has props about to be despawned (object = the populated component or its container, param = component which was populated)",
	object: [Component, Container],
	param: [Component],
),
Event (
	name: "event_object_interiors_despawning",
	description: "Event for when an object has interiors about to be despawned (object = the populated controllable)",
	object: [Controllable],
),
Event (
	name: "event_area_discovered",
	description: "Event for when a player-owned object has discovered a previously undiscovered area (param = sector, param2 = center position of discovered hex in sector)",
	param: [Sector],
	param2: [position],
),
Event (
	name: "event_universe_generated",
	description: "Event for when the universe generation process has been completed (all stations have been built) at game start or when loading a savegame.",
),
Event (
	name: "event_job_ship_activated",
	description: "Event for when a job ship has been activated in the galaxy, either spawned directly in space or when being finished at a shipyard (param = jobship)",
	param: [Ship],
),
Event (
	name: "event_faction_activated",
	description: "Event for when a faction is activated (param = faction)",
	param: [Faction],
),
Event (
	name: "event_faction_deactivated",
	description: "Event for when a faction is deactivated (param = faction)",
	param: [Faction],
),
Event (
	name: "event_faction_headquarters_changed",
	description: "Event for when a faction headquarters has been changed (param = faction, param2 = new faction headquarters station, param3 = old faction headquarters station)",
	param: [Faction],
	param2: [Station],
	param3: [Station],
),
Event (
	name: "event_lockbox_opened",
	description: "Event for when a lockbox has been opened (object = opened lockbox)",
	object: [Object],
),
	]
)
